Файл index.js инициирует выполнение приложения (по сути, отдает команду на отрисовку приложения App.js)

В приложении todos в списке initinalData содежится информация для приложения, а в классе App, который является наследником класса Component, производится описание его работы

Если JSX-часть состоит из нескольких строк, то ее нужно заключить в обычные скобки. Иначе эта часть работать не будет

render () { return() } должен содержать в себе сначала div.  Внутри этого div должны быть все остальные JSX-теги

js-файлы приложения называются компонентами

При работе с компонентами нельзя забывать про точку с запятой после закрывающей скобки метода return!

Пропы - это данные, которые передаются между компонентами. При передаче пропа нужно указать его название

По сути, новый компонент добавляет кусок страницы, имея внутри себя собственную логику и получая данные от класса-родителя

При помощи конструкций в строках 10 и 11 мы можем управлять состоянием надписи названия дела. См книгу, стр 30
В общем, если показатель истинный, то возвращается просто название дела. А если ложный - то возвращается зачеркнутое название дела

&#9745 и &#9746 - это обозначения значков в юникоде, эти значки будут вместо текста кнопок

Для того, чтобы спускать данные (передавать их от старших компонентов младшим), нужно использовать пропы. Но для того, чтобы сделать наоборот - передать данные от младших компонентов старшим - нужно устроить пляску с бубном, задав данные как state-свойство

Для того, чтобы запрограммировать кнопку на сервисе, нужно сначала создать метод в главном компоненте, который будет совершать необходимые действия. Потом надо забиндить новый метод на объект this. Потом в render нужно передать новый пропс, а в компоненте-потомке - принять этот пропс, прописав обработку событий